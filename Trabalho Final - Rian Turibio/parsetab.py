
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftANDORleftGREATERLESSGREATEQLESSEQEQEQNOTEQleftPLUSMINUSleftTIMESDIVIDErightUMINUSAND CHAR COMMA DIVIDE DOUBLE ELSE EQEQ EQUALS FALSE FLOAT FOR GE GREATEQ GREATER GT ID IF INT INTEGER LBRACES LE LESS LESSEQ LPAREN LT MAIN MINUS NE NEWLINE NOTEQ OR PLUS POWER RBRACES RETURN RPAREN SEMI SEMICOLON STRING TIMES TRUE VOID WHILEprograma : INT MAIN LPAREN RPAREN LBRACES code RBRACEScode : statement SEMICOLON\n                | statement SEMICOLON code\n                | statement IF expression LPAREN code RPAREN\n                | statement IF expression LPAREN code RPAREN ELSE LBRACES code RBRACESstatement : ID EQUALS expressionstatement : expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expressionexpression : '-' expression %prec UMINUSexpression : LPAREN expression RPARENexpression : INTEGERexpression : DOUBLEexpression : CHARexpression : expression GREATER expression\n                  | expression LESS expression\n                  | expression GREATEQ expression\n                  | expression LESSEQ expression\n                  | expression EQEQ expression\n                  | expression NOTEQ expression\n                  | expression AND expression\n                  | expression OR expressionexpression : IDexpression : boolbool : TRUEbool : FALSE"
    
_lr_action_items = {'INT':([0,],[2,]),'$end':([1,21,],[0,-1,]),'MAIN':([2,],[3,]),'LPAREN':([3,6,7,12,13,14,15,16,17,18,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,42,43,44,45,46,47,48,49,50,51,52,54,58,],[4,7,7,7,-14,-15,-16,-26,-27,-28,-25,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-12,-13,54,-8,-9,-10,-11,-17,-18,-19,-20,-21,-22,-23,-24,7,7,]),'RPAREN':([4,13,14,15,16,17,18,19,20,22,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,55,56,60,],[5,-14,-15,-16,-26,-27,-28,38,-25,-2,-12,-13,-3,-8,-9,-10,-11,-17,-18,-19,-20,-21,-22,-23,-24,56,-4,-5,]),'LBRACES':([5,57,],[6,58,]),'ID':([6,7,12,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,54,58,],[11,20,20,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,11,11,]),'-':([6,7,12,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,54,58,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'INTEGER':([6,7,12,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,54,58,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'DOUBLE':([6,7,12,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,54,58,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'CHAR':([6,7,12,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,54,58,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'TRUE':([6,7,12,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,54,58,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'FALSE':([6,7,12,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,54,58,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'RBRACES':([8,22,39,56,59,60,],[21,-2,-3,-4,60,-5,]),'SEMICOLON':([9,10,11,13,14,15,16,17,18,20,37,38,41,42,43,44,45,46,47,48,49,50,51,52,53,],[22,-7,-25,-14,-15,-16,-26,-27,-28,-25,-12,-13,-8,-9,-10,-11,-17,-18,-19,-20,-21,-22,-23,-24,-6,]),'IF':([9,10,11,13,14,15,16,17,18,20,37,38,41,42,43,44,45,46,47,48,49,50,51,52,53,],[23,-7,-25,-14,-15,-16,-26,-27,-28,-25,-12,-13,-8,-9,-10,-11,-17,-18,-19,-20,-21,-22,-23,-24,-6,]),'PLUS':([10,11,13,14,15,16,17,18,19,20,37,38,40,41,42,43,44,45,46,47,48,49,50,51,52,53,],[24,-25,-14,-15,-16,-26,-27,-28,24,-25,-12,-13,24,-8,-9,-10,-11,24,24,24,24,24,24,24,24,24,]),'MINUS':([10,11,13,14,15,16,17,18,19,20,37,38,40,41,42,43,44,45,46,47,48,49,50,51,52,53,],[25,-25,-14,-15,-16,-26,-27,-28,25,-25,-12,-13,25,-8,-9,-10,-11,25,25,25,25,25,25,25,25,25,]),'TIMES':([10,11,13,14,15,16,17,18,19,20,37,38,40,41,42,43,44,45,46,47,48,49,50,51,52,53,],[26,-25,-14,-15,-16,-26,-27,-28,26,-25,-12,-13,26,26,26,-10,-11,26,26,26,26,26,26,26,26,26,]),'DIVIDE':([10,11,13,14,15,16,17,18,19,20,37,38,40,41,42,43,44,45,46,47,48,49,50,51,52,53,],[27,-25,-14,-15,-16,-26,-27,-28,27,-25,-12,-13,27,27,27,-10,-11,27,27,27,27,27,27,27,27,27,]),'GREATER':([10,11,13,14,15,16,17,18,19,20,37,38,40,41,42,43,44,45,46,47,48,49,50,51,52,53,],[28,-25,-14,-15,-16,-26,-27,-28,28,-25,-12,-13,28,-8,-9,-10,-11,-17,-18,-19,-20,-21,-22,28,28,28,]),'LESS':([10,11,13,14,15,16,17,18,19,20,37,38,40,41,42,43,44,45,46,47,48,49,50,51,52,53,],[29,-25,-14,-15,-16,-26,-27,-28,29,-25,-12,-13,29,-8,-9,-10,-11,-17,-18,-19,-20,-21,-22,29,29,29,]),'GREATEQ':([10,11,13,14,15,16,17,18,19,20,37,38,40,41,42,43,44,45,46,47,48,49,50,51,52,53,],[30,-25,-14,-15,-16,-26,-27,-28,30,-25,-12,-13,30,-8,-9,-10,-11,-17,-18,-19,-20,-21,-22,30,30,30,]),'LESSEQ':([10,11,13,14,15,16,17,18,19,20,37,38,40,41,42,43,44,45,46,47,48,49,50,51,52,53,],[31,-25,-14,-15,-16,-26,-27,-28,31,-25,-12,-13,31,-8,-9,-10,-11,-17,-18,-19,-20,-21,-22,31,31,31,]),'EQEQ':([10,11,13,14,15,16,17,18,19,20,37,38,40,41,42,43,44,45,46,47,48,49,50,51,52,53,],[32,-25,-14,-15,-16,-26,-27,-28,32,-25,-12,-13,32,-8,-9,-10,-11,-17,-18,-19,-20,-21,-22,32,32,32,]),'NOTEQ':([10,11,13,14,15,16,17,18,19,20,37,38,40,41,42,43,44,45,46,47,48,49,50,51,52,53,],[33,-25,-14,-15,-16,-26,-27,-28,33,-25,-12,-13,33,-8,-9,-10,-11,-17,-18,-19,-20,-21,-22,33,33,33,]),'AND':([10,11,13,14,15,16,17,18,19,20,37,38,40,41,42,43,44,45,46,47,48,49,50,51,52,53,],[34,-25,-14,-15,-16,-26,-27,-28,34,-25,-12,-13,34,-8,-9,-10,-11,-17,-18,-19,-20,-21,-22,-23,-24,34,]),'OR':([10,11,13,14,15,16,17,18,19,20,37,38,40,41,42,43,44,45,46,47,48,49,50,51,52,53,],[35,-25,-14,-15,-16,-26,-27,-28,35,-25,-12,-13,35,-8,-9,-10,-11,-17,-18,-19,-20,-21,-22,-23,-24,35,]),'EQUALS':([11,],[36,]),'ELSE':([56,],[57,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'code':([6,22,54,58,],[8,39,55,59,]),'statement':([6,22,54,58,],[9,9,9,9,]),'expression':([6,7,12,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,54,58,],[10,19,37,10,40,41,42,43,44,45,46,47,48,49,50,51,52,53,10,10,]),'bool':([6,7,12,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,54,58,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> INT MAIN LPAREN RPAREN LBRACES code RBRACES','programa',7,'p_estrutura_inicial','AL - Rian Turibio - 14209393.py',89),
  ('code -> statement SEMICOLON','code',2,'p_code','AL - Rian Turibio - 14209393.py',92),
  ('code -> statement SEMICOLON code','code',3,'p_code','AL - Rian Turibio - 14209393.py',93),
  ('code -> statement IF expression LPAREN code RPAREN','code',6,'p_code','AL - Rian Turibio - 14209393.py',94),
  ('code -> statement IF expression LPAREN code RPAREN ELSE LBRACES code RBRACES','code',10,'p_code','AL - Rian Turibio - 14209393.py',95),
  ('statement -> ID EQUALS expression','statement',3,'p_statement_assing','AL - Rian Turibio - 14209393.py',117),
  ('statement -> expression','statement',1,'p_statement_expr','AL - Rian Turibio - 14209393.py',121),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','AL - Rian Turibio - 14209393.py',125),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','AL - Rian Turibio - 14209393.py',126),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','AL - Rian Turibio - 14209393.py',127),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','AL - Rian Turibio - 14209393.py',128),
  ('expression -> - expression','expression',2,'p_expression_uminus','AL - Rian Turibio - 14209393.py',139),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','AL - Rian Turibio - 14209393.py',143),
  ('expression -> INTEGER','expression',1,'p_expression_number','AL - Rian Turibio - 14209393.py',147),
  ('expression -> DOUBLE','expression',1,'p_expression_double','AL - Rian Turibio - 14209393.py',152),
  ('expression -> CHAR','expression',1,'p_expression_char','AL - Rian Turibio - 14209393.py',156),
  ('expression -> expression GREATER expression','expression',3,'p_expression_logop','AL - Rian Turibio - 14209393.py',160),
  ('expression -> expression LESS expression','expression',3,'p_expression_logop','AL - Rian Turibio - 14209393.py',161),
  ('expression -> expression GREATEQ expression','expression',3,'p_expression_logop','AL - Rian Turibio - 14209393.py',162),
  ('expression -> expression LESSEQ expression','expression',3,'p_expression_logop','AL - Rian Turibio - 14209393.py',163),
  ('expression -> expression EQEQ expression','expression',3,'p_expression_logop','AL - Rian Turibio - 14209393.py',164),
  ('expression -> expression NOTEQ expression','expression',3,'p_expression_logop','AL - Rian Turibio - 14209393.py',165),
  ('expression -> expression AND expression','expression',3,'p_expression_logop','AL - Rian Turibio - 14209393.py',166),
  ('expression -> expression OR expression','expression',3,'p_expression_logop','AL - Rian Turibio - 14209393.py',167),
  ('expression -> ID','expression',1,'p_expression_name','AL - Rian Turibio - 14209393.py',178),
  ('expression -> bool','expression',1,'p_expression_bool','AL - Rian Turibio - 14209393.py',186),
  ('bool -> TRUE','bool',1,'p_true','AL - Rian Turibio - 14209393.py',190),
  ('bool -> FALSE','bool',1,'p_false','AL - Rian Turibio - 14209393.py',194),
]
